AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Application CICD Base Line for Gen-AI Lab Environments.
Parameters: 
  ArtifactS3BucketName:
    Type: String
    Default: lab-edu-bucket-artifact-store-application
  S3AccessLogsBucket:
    Type: String
    Default: lab-edu-bucket-access-log
  CodeCommitRepositoryName:
    Type: String
    Default: lab-edu-codecommit-application
  CodePipelineName:
    Type: String
    Default: lab-edu-codepipeline-application
  CloudWatchEventRolePolicyName:
    Type: String
    Default: lab-edu-policy-cloudwatch-event-for-app-cicd
  CodeDeployApplicationName:
    Type: String
    Default: lab-edu-codedeploy-application-ec2
  CodeDeploymentGroupName:
    Type: String
    Default: lab-edu-deployment-group-chatbot-app
  EC2InstanceName:
    Description: EC2 Server Name Tag
    Type : String
    Default: streamlit-privavte-02


Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "CI/CD Resource"
        Parameters: 
          - ArtifactS3BucketName
          - S3AccessLogsBucket
          - CodeCommitRepositoryName
          - CodePipelineName
          - CodeDeployApplicationName
          - CodeDeploymentGroupName
          - CloudWatchEventRolePolicyName
          - EC2InstanceName


Resources:
  #Create Artifact Store for Code Pipeline
  ArtifactS3:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join ['',[!Ref ArtifactS3BucketName,'-', !Ref 'AWS::AccountId']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # LoggingConfiguration:
      #   DestinationBucketName: !Join ['',[!Ref S3AccessLogsBucket,'-', !Ref 'AWS::AccountId']]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  CodePipelineArtifactS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactS3
      PolicyDocument:
        Statement:
          - Sid: DenyDeleteBucket
            Effect: Deny
            Principal: "*"
            Action: s3:DeleteBucket
            Resource: !Sub arn:${AWS::Partition}:s3:::${ArtifactS3}
            Condition:
              StringNotEquals:
                s3:ResourceAccount:
                  - !Ref AWS::AccountId
  # # Create Log Store for S3 Bucket Access Logging
  # AccessLogS3:
  #   Type: AWS::S3::Bucket
  #   UpdateReplacePolicy: Retain
  #   Properties:
  #     BucketName: !Join ['',[!Ref S3AccessLogsBucket,'-', !Ref 'AWS::AccountId']]
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: True
  #       BlockPublicPolicy: True
  #       IgnorePublicAcls: True
  #       RestrictPublicBuckets: True
  # AccessLogS3Policy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref AccessLogS3
  #     PolicyDocument:
  #       Statement:
  #         - Sid: DenyDeleteBucket
  #           Effect: Deny
  #           Principal: "*"
  #           Action: s3:DeleteBucket
  #           Resource: !Sub arn:${AWS::Partition}:s3:::${AccessLogS3}
  #           Condition:
  #             StringNotEquals:
  #               s3:ResourceAccount:
  #                 - !Ref AWS::AccountId
      
  
  #Application Source Code Store
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: !Ref CodeCommitRepositoryName
  CloudWatchEventRule:    
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodeCommitRepositoryName ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: codepipeline-AppPipeline
      
  #Create CodeDeploy 
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
        ApplicationName: !Ref CodeDeployApplicationName
        ComputePlatform: Server
  CodeDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      DeploymentGroupName: !Ref CodeDeploymentGroupName
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Key: Name
          Value: !Ref EC2InstanceName
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn  

  #Create CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      Name: !Ref CodePipelineName
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              # RunOrder: 1
              ActionTypeId:
                Category: Source
                Provider: CodeCommit
                Owner: AWS
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                RepositoryName: !Ref CodeCommitRepositoryName
                BranchName: main
        - Name: Deploy
          Actions:
            - Name: DeployAction
              # RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeploymentGroup
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactS3
                
  #Create IAM Role
  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: !Ref CloudWatchEventRolePolicyName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess